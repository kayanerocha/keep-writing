@model KeepWriting.ViewModels.UsuarioViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="limiter">
        <div class="container-login100" style="background-color: white;">
            <div class="wrap-login100">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <span class="login100-form-title p-b-34 p-t-27">@Html.Label(KeepWriting.LocalResource.Resource.cadastro.ToString(), htmlAttributes: new { @class = "login100-form-title p-b-34 p-t-27" })</span>

                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "input100", placeholder = KeepWriting.LocalResource.Resource.nome } })
                    <span class="focus-input100" data-placeholder="&#xf207;"></span>
                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                </div>

                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.DataNasc, new { htmlAttributes = new { @class = "input100", placeholder = KeepWriting.LocalResource.Resource.dataNasc } })
                    <span class="focus-input100" data-placeholder="&#xf207;"></span>
                    @Html.ValidationMessageFor(model => model.DataNasc, "", new { @class = "text-danger" })
                </div>

                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "input100", placeholder = KeepWriting.LocalResource.Resource.email } })
                    <span class="focus-input100" data-placeholder="&#xf207;"></span>
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>

                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.Senha, new { htmlAttributes = new { @class = "input100", placeholder = KeepWriting.LocalResource.Resource.senha } })
                    <span class="focus-input100" data-placeholder="&#xf191;"></span>
                    @Html.ValidationMessageFor(model => model.Senha, "", new { @class = "text-danger" })
                </div>

                <div class="wrap-input100 validate-input">
                    @Html.EditorFor(model => model.ConfirmarSenha, new { htmlAttributes = new { @class = "input100", placeholder = KeepWriting.LocalResource.Resource.confirmarSenha } })
                    <span class="focus-input100" data-placeholder="&#xf191;"></span>
                    @Html.ValidationMessageFor(model => model.ConfirmarSenha, "", new { @class = "text-danger" })
                </div>

                <div class="contact100-form-checkbox">
                    <input class="input-checkbox100" id="ckb1" type="checkbox" name="remember-me" required="required">
                    <label class="label-checkbox100" for="ckb1">
                        Eu concordo com os <a href="~/Content/termos.pdf" target="_blank" class="term-service">Termos de Serviço</a>
                    </label>
                </div>

                <div class="container-login100-form-btn">
                    <input type="submit" value=@KeepWriting.LocalResource.Resource.cadastro class="login100-form-btn" />
                </div>

                <div class="wrap-input100 validate-input">
                    @ViewBag.EmailVerif
                </div>

                <div class="text-center p-t-20">
                    @Html.ActionLink("Já possui cadastro?", "Autenticacao")
                </div>

            </div>
        </div>
    </div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}